name: Coverity Scan
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      languages:
        description: "Languages to analyze"
        required: true
        default: "c-cpp"
jobs:
  coverity:
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Download and Install Coverity Tool
        run: |
          wget https://scan.coverity.com/download/linux64 \
            --post-data "token=${{ secrets.COVERITY_TOKEN }}&project=${{ github.repository }}" \
            -O coverity_tool.tgz
          mkdir coverity_tool
          tar -xvzf coverity_tool.tgz -C coverity_tool --strip-components=1
          export PATH=$PWD/coverity_tool/bin:$PATH
          echo "Coverity Tool installed successfully"
      - name: Build with Coverity
        run: |
          sudo apt-get install -y git yasm curl wget gcc make cmake unzip build-essential
          sudo add-apt-repository -y ppa:openjdk-r/ppa
          sudo apt-get install -y openjdk-8-jdk openjdk-17-jdk
          BASEWORKDIR=$(pwd)
          
          wget https://dl.google.com/android/repository/commandlinetools-linux-9123335_latest.zip
          unzip commandlinetools-linux-9123335_latest.zip
          mkdir -p Android/Sdk/cmdline-tools
          mv cmdline-tools Android/Sdk/cmdline-tools/latest
          cd Android/Sdk/cmdline-tools/latest/bin
          yes | ./sdkmanager --licenses || true
          ./sdkmanager --install platforms\;android-25
          ./sdkmanager --install build-tools\;25.0.3
          ./sdkmanager --install sources\;android-25
          ./sdkmanager --install platform-tools
          cd $BASEWORKDIR
  
          wget https://dl.google.com/android/repository/android-ndk-r11c-linux-x86_64.zip
          unzip android-ndk-r11c-linux-x86_64.zip
          mkdir -p Android/Sdk/ndk
          mv android-ndk-r11c Android/Sdk/ndk/
          cp config/module-lite.sh config/module.sh
          export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
          export ANDROID_HOME=$BASEWORKDIR/Android/Sdk
          export ANDROID_NDK=$BASEWORKDIR/Android/Sdk/ndk/android-ndk-r11c
          export ANDROID_NDK_ROOT=$BASEWORKDIR/Android/Sdk/ndk/android-ndk-r11c
  
          cd $BASEWORKDIR
          echo '--> init-android.sh'
          bash init-android.sh
          echo '--> init-android-openssl.sh'
          bash init-android-openssl.sh

          cd $BASEWORKDIR/android/contrib
          echo '--> compile-openssl.sh'
          bash compile-openssl.sh x86_64
          echo '--> compile-ffmpeg.sh'
          bash compile-ffmpeg.sh x86_64

          cd $BASEWORKDIR/android
          echo '--> compile-ijk.sh'
          bash compile-ijk.sh x86_64

          cd $BASEWORKDIR/android/ijkplayer
          sed -i "/ijkplayer-example/d" settings.gradle
          sed -i "/ijkplayer-exo/d" settings.gradle
          ./gradlew clean
          coverity_tool/bin/cov-build --dir cov-int ./gradlew assembleRelease || true
      - name: Compress with bzip2
        run: |
          tar cjvf myproject.tar.bz2 cov-int
        id: compress
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "coverity-scan-${{ github.run_id }}"
          release_name: "Coverity Scan Results"
          body: "Automated Coverity Scan Results"
          draft: false
          prerelease: false
      - name: Upload Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: myproject.tar.bz2
          asset_name: myproject.tar.bz2
          asset_content_type: application/x-bzip2
      - name: Notify Coverity Scan
        run: |
          curl --data "project=${{ github.repository }}&token=${{ secrets.COVERITY_TOKEN }}&email=cpp.benchmark@proton.me&url=https://github.com/${{ github.repository }}/releases/download/coverity-scan-${{ github.run_id }}/myproject.tar.bz2&version=1.0&description=Automated+Coverity+Scan"\
          https://scan.coverity.com/builds
